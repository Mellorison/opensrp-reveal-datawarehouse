-- Deploy utils:refresh_mat_views to pg
-- requires: materialized_view_tracking

BEGIN;

-- lets make it possible to create this function in any schema provided by the
-- :"schema" variable - and default to public.
SET search_path TO :"schema",public;

CREATE OR REPLACE FUNCTION refresh_mat_view(view_name VARCHAR, concurrent BOOLEAN DEFAULT TRUE) RETURNS VOID AS $$
-- this function is used to refresh a materialized view and simultaneously record
-- the time that the refresh started and finished
-- params:
--      view_name - the name of the materialized view
--      concurrent - whether to refresh concurrently or not
BEGIN

    -- record the start time
    INSERT INTO materialized_view_tracking (name, start, finish)
    VALUES (view_name, CLOCK_TIMESTAMP(), NULL)
    ON CONFLICT (name) DO UPDATE
    SET start = CLOCK_TIMESTAMP(), finish = NULL;

    -- refresh the view
    IF concurrent = TRUE THEN
        EXECUTE 'REFRESH MATERIALIZED VIEW CONCURRENTLY ' || view_name;
    ELSE
        EXECUTE 'REFRESH MATERIALIZED VIEW ' || view_name;
    END IF;

    -- record the end time
    UPDATE materialized_view_tracking
    SET finish = CLOCK_TIMESTAMP()
    WHERE name = view_name;

END;
$$ LANGUAGE plpgsql;

COMMIT;
