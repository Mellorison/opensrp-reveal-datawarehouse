-- Verify reveal_transaction_tables:clients on pg

BEGIN;

SET search_path TO :"schema",public;

SELECT
    id,
    created_at,
    baseEntityId,
    dateCreated,
    dateVoided,
    firstName,
    middleName,
    lastName,
    gender,
    birthdate,
    identifiers,
    attributes,
    relationships,
    addresses,
    residence,
    birthdateApprox,
    deathdateApprox,
    clientApplicationVersion,
    clientDatabaseVersion,
    server_version
FROM clients
WHERE FALSE;

-- check primary key
SELECT 1/COUNT(*)
FROM pg_catalog.pg_constraint
WHERE
conname = 'clients_pkey'
AND contype = 'p'
AND 1 = ALL(conkey);

-- check fk constraints
SELECT 1/COUNT(*)
FROM pg_catalog.pg_constraint
WHERE
conname = 'fk_clients_residence'
AND contype = 'f'
AND 15 = ALL(conkey)
AND 1 = ALL(confkey);

-- lets create the util_exception_query function
CREATE OR REPLACE FUNCTION util_exception_query(text)
  RETURNS SETOF text AS
$func$
DECLARE
    text_msg text;
    text_detail text;
    text_hint text;
BEGIN
    EXECUTE $1;
EXCEPTION WHEN OTHERS THEN
    GET STACKED DIAGNOSTICS text_msg    = MESSAGE_TEXT,
                            text_detail = PG_EXCEPTION_DETAIL,
                            text_hint   = PG_EXCEPTION_HINT;
    RETURN NEXT text_msg;
END
$func$ LANGUAGE plpgsql;
--- end

-- you should not be able to insert a client without existing residence
SELECT 1/COUNT(*)
FROM util_exception_query(
$$
INSERT INTO clients
VALUES (
    '123e4567-mosh-12d3-a456-426655440000',
    NOW(),
    '123e4567-mosh-12d3-a456-426655440000',
    NULL,
    NULL,
    'mosh',
    'the',
    'pitt',
    'm',
    NULL,
    '{}'::jsonb,
    '{}'::jsonb,
    '{}'::jsonb,
    '{}'::jsonb,
    -- this one does not exist yet
    '123e4567-mosh-12d3-a456-426655440000',
    'False',
    'False',
    1,
    1,
    0
)
$$) AS output
WHERE output ILIKE '%violates foreign key constraint%';

SELECT 1/COUNT(*)
FROM pg_catalog.pg_indexes
WHERE
schemaname = :'schema'
AND tablename = 'clients'
AND indexname = 'clients_baseentityid_idx';

SELECT 1/COUNT(*)
FROM pg_catalog.pg_indexes
WHERE
schemaname = :'schema'
AND tablename = 'clients'
AND indexname = 'clients_residence_idx';

SELECT 1/COUNT(*)
FROM pg_catalog.pg_indexes
WHERE
schemaname = :'schema'
AND tablename = 'clients'
AND indexname = 'clients_residence_baseentityid_idx';

ROLLBACK;
