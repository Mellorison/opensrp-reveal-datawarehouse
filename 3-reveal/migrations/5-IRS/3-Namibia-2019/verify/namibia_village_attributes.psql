-- Verify reveal_irs_namibia_2019:namibia_village_attributes on pg

BEGIN;

SET search_path TO :"schema",public;

SELECT
    vil_uid,
    jurisdiction_id,
    village,
    constituency,
    district,
    region,
    target_2019,
    targetted_2019,
    risk_2019
FROM namibia_village_attributes
WHERE FALSE;

-- check primary key
SELECT 1/COUNT(*)
FROM pg_catalog.pg_constraint
WHERE
conname = 'namibia_village_attributes_pkey'
AND contype = 'p'
AND 1 = ALL(conkey);

-- check fk constraints
SELECT 1/COUNT(*)
FROM pg_catalog.pg_constraint
WHERE
conname = 'fk_namibia_village_attributes_jurisdiction'
AND contype = 'f'
AND 2 = ALL(conkey)
AND 1 = ALL(confkey);

-- check indices
SELECT 1/COUNT(*)
FROM pg_catalog.pg_indexes
WHERE
schemaname = :'schema'
AND tablename = 'namibia_village_attributes'
AND indexname = 'namibia_village_attributes_jurisdiction_id_idx';

SELECT 1/COUNT(*)
FROM pg_catalog.pg_indexes
WHERE
schemaname = :'schema'
AND tablename = 'namibia_village_attributes'
AND indexname = 'namibia_village_attributes_targetted_2019_idx';

-- lets create the util_exception_query function
CREATE OR REPLACE FUNCTION util_exception_query(text)
  RETURNS SETOF text AS
$func$
DECLARE
    text_msg text;
    text_detail text;
    text_hint text;
BEGIN
    EXECUTE $1;
EXCEPTION WHEN OTHERS THEN
    GET STACKED DIAGNOSTICS text_msg    = MESSAGE_TEXT,
                            text_detail = PG_EXCEPTION_DETAIL,
                            text_hint   = PG_EXCEPTION_HINT;
    RETURN NEXT text_msg;
END
$func$ LANGUAGE plpgsql;
--- end

-- you should not be able to insert without existing jurisdiction
SELECT 1/COUNT(*)
FROM util_exception_query(
$$
INSERT INTO namibia_village_attributes
VALUES (
    '123e4567-e89b-12d3-a456-426655440000',
    '123e4567-e89b-12d3-a456-426655440000', -- does not exist yet
    'Nice Village',
    'Nice Constituency',
    'Nice District',
    'Nice Region',
    200,
    't',
    '23.50'
)
$$) AS output
WHERE output ILIKE '%violates foreign key constraint%';

ROLLBACK;
